--PL-SQL 이란 ?
-- SQL 언어에 절차적 요소를 추가해서 프로그래밍 한 것을 PL-SQL 이라고 한다.


-- 예제 1

DECLARE

-- 변수 선언 영역
    v_no NUMBER(4, 1); -- 4자리에 소숫점 이하 1자리 값을 넣는 변수 선언
  

BEGIN

-- SQL 구문이나 pl-sql 문으로 코딩하는 영역 (:=:대입, =:비교,동등)
    v_no := 12.7;
    dbms_output.put_line(v_no);-- 출력
END;
/

-- 예제 2

DECLARE
    vname VARCHAR2(20);
    vban  VARCHAR2(20);
BEGIN
    SELECT
        name,
        ban
    INTO
        vname,
        vban
    FROM
        student
    WHERE
        num = 4;

    dbms_output.put_line(vname
                         || '님은 '
                         || vban
                         || '입니다.');
END;
/


-- 예제 3
--person 과 food 테이블을 조인하여 person_num 이 21인 사람의 이름, 주문한 메뉴, 가격을 출력하시오.
DECLARE
    vname  VARCHAR2(20);
    vfood  VARCHAR2(20);
    vprice NUMBER(7);
BEGIN
    SELECT
        pserson_name,
        fname,
        fprice
    INTO
        vname,
        vfood,
        vprice
    FROM
        food   f,
        person p
    WHERE
            f.food_num = p.food_num
        AND person_num = 21;

    dbms_output.put_line('주문자:' || vname);
    dbms_output.put_line('메뉴명:' || vfood);
    dbms_output.put_line('가 격:' || vprice);
END;
/

--예제 4 
-- 상품명을 변수에 지정한후 해당 상품명의 가격과 색상을 출력

DECLARE
    vsangpum VARCHAR2(20) := '청바지';
    vcolor   VARCHAR2(20);
    vprice   NUMBER(7);
    vprice2  VARCHAR2(20);
BEGIN
    SELECT
        sang_price,
        sang_color,
        ltrim(to_char(sang_price, 'L999,999'))
    INTO
        vprice,
        vcolor,
        vprice2
    FROM
        shop
    WHERE
        sang_name = vsangpum;

    dbms_output.put_line('상품명:' || vsangpum);
    dbms_output.put_line('색 상:' || vcolor);
    dbms_output.put_line('가 격:' || vprice);
    dbms_output.put_line('가 격:' || vprice2);
END;
/

/* 
if 조건식 then
    문장 1;

else 
    문장 2;
end if;

다중 if 문
if 조건식 1 then
    문장1;
elsif 조건 2 then
    문장2;
    ...
end if;

*/

-- 예제5
-- 년도에 맞는 띠구하기

--키보드로 년도를 입력받고자 할 경우
ACCEP year PROMPT '태어난 년도를 입력하세요';

DECLARE

--    v_year number(4) := 1989;
    v_year NUMBER(4) := '&year'; -- 입력한 값을 대입
    v_mod  NUMBER(2) := MOD(v_year, 12);-- 년도를 12로 나눈 나머지를 구한다.
    v_ddi  VARCHAR2(10); -- 띠를 저장할 변수
BEGIN
    IF v_mod = 0 THEN
        v_ddi := '원숭이';
    ELSIF v_mod = 1 THEN
        v_ddi := '닭';
    ELSIF v_mod = 2 THEN
        v_ddi := '개';
    ELSIF v_mod = 3 THEN
        v_ddi := '돼지';
    ELSIF v_mod = 4 THEN
        v_ddi := '쥐';
    ELSIF v_mod = 5 THEN
        v_ddi := '소';
    ELSIF v_mod = 6 THEN
        v_ddi := '호랑이';
    ELSIF v_mod = 7 THEN
        v_ddi := '토끼';
    ELSIF v_mod = 8 THEN
        v_ddi := '용';
    ELSIF v_mod = 9 THEN
        v_ddi := '뱀';
    ELSIF v_mod = 10 THEN
        v_ddi := '말';
    ELSIF v_mod = 11 THEN
        v_ddi := '양';
    END IF;

    dbms_output.put_line(v_year
                         || '년생은 '
                         || v_ddi
                         || '띠입니다');
END;
/

-- 예제 6
-- db 컬럼의 타입을 가져오는 방법 TYPE
accept iname prompt 'name?';

DECLARE
    v_name   student.name%TYPE := '&iname';
    v_height student.height%TYPE;
    v_java   student.java%TYPE;
    v_spring student.spring%TYPE;
BEGIN
    SELECT
        height,
        java,
        spring
    INTO
        v_height,
        v_java,
        v_spring
    FROM
        student
    WHERE
        name = v_name;

    dbms_output.put_line('학생명:' || v_name);
    dbms_output.put_line('키:' || v_height);
    dbms_output.put_line('자바점수:' || v_java);
    dbms_output.put_line('스프링점수:' || v_spring);
    dbms_output.put_line('총점:' ||(v_java + v_spring));
END;
/

/*
반복문 : loop
loop
    문장들;
    exit when 조건;
    end loop;
*/


--예제 7
-- 1부터 10까지 반복해서 출력

DECLARE
    v_no NUMBER(2) := 0;
BEGIN
    LOOP
        v_no := v_no + 1;
        dbms_output.put_line('no=' || v_no);
        EXIT WHEN v_no = 10; --10일경우 반복문을 빠져나간다.
    END LOOP;
END;
/



-- 예제 8
-- 문제 : 단을 입력하면 해당단을 출력하시오 
accept dan prompt 'dan?';

DECLARE
    v_dan NUMBER(2) := '&dan';
    v_idx NUMBER(1) := 1;
BEGIN
    dbms_output.put_line('** '
                         || v_dan
                         || ' 단 **');
    LOOP
        dbms_output.put_line(v_dan
                             || 'X'
                             || v_idx
                             || '='
                             || v_dan * v_idx);

        v_idx := v_idx + 1;
        EXIT WHEN v_idx = 10; --10일경우 반복문을 빠져나간다.
    END LOOP;

END;
/


-- 예제 9 - Exception 처리 (예제 4 복사)
accept sangpum prompt 'sangpum?';

DECLARE
    vsangpum VARCHAR2(20) := '&sangpum';
    vcolor   VARCHAR2(20);
    vprice   NUMBER(7);
    vprice2  VARCHAR2(20);
BEGIN
    SELECT
        sang_price,
        sang_color,
        ltrim(to_char(sang_price, 'L999,999'))
    INTO
        vprice,
        vcolor,
        vprice2
    FROM
        shop
    WHERE
        sang_name = vsangpum;

    dbms_output.put_line('상품명:' || vsangpum);
    dbms_output.put_line('색 상:' || vcolor);
    dbms_output.put_line('가 격:' || vprice);
    dbms_output.put_line('가 격:' || vprice2);
    
    -- 결과가 2개 이상이거나 없으면 오류 발생
    -- 오라클에서 예외처리하는 방법

EXCEPTION
    WHEN no_data_found THEN
        dbms_output.put_line(vsangpum || ' 상품이 DB에 없습니다.');
    WHEN too_many_rows THEN
        dbms_output.put_line(vsangpum || ' 상품이 DB에 두개이상 존재합니다.');
    WHEN OTHERS THEN
        dbms_output.put_line(vsangpum || ' 상품에 대한 오류 발생- 뭔지 모름');
END;
/


/* 

    반복문 
    for 변수 in (reverse) 시작값... 최종값 loop
    문장들;
    end loop;
    
*/
    
-- 예제 10, 예제8 구구단 복사후 for 문으로 변경하기
accept dan prompt 'dan?';

DECLARE
    v_dan NUMBER(2) := '&dan';
    v_idx NUMBER(1);
BEGIN
    dbms_output.put_line('** '
                         || v_dan
                         || ' 단 **');
    FOR v_idx IN 1..9 LOOP
        dbms_output.put_line(v_dan
                             || 'X'
                             || v_idx
                             || '='
                             || v_dan * v_idx);
    END LOOP;

END;
/


-- 예제 11
--- 레코드 단위로 데이터 가져오기

DECLARE
    v_num student.num%TYPE := 4;
    v_stu angel.student%rowtype; -- 레코드 단위로 읽어올 경우

BEGIN
    SELECT
        *
    INTO v_stu
    FROM
        student
    WHERE
        num = v_num;

    dbms_output.put_line('이름: ' || v_stu.name);
    dbms_output.put_line('키: ' || v_stu.height);
    dbms_output.put_line('자바: ' || v_stu.java);
    dbms_output.put_line('스프링: ' || v_stu.spring);
    dbms_output.put_line('반: ' || v_stu.ban);
END;
/

-- DB의 여러 데이터를 조회할 경우
/*
     Cursor : sql 문을 실행할때마다 명령이 분석되고 실행되어 결과를 보관하기 위한 특별한 메모리 영역을 사용하는데 이 영역을 참조 하는것이 커서이다.
      select 문에서 여러 데이타 조회시 사용하는 객체이다.
      
     커서 속성
     sql%rowcount : 실행된 갯수 반환
     sql&found : 가장 최근의 sql 문이 하나 이상의 행에 영향을 준 경우 true
     sql&notfound : 결과행이 없는 경우
     sql%isopen : 항상 false(항상 close 를 하기 때문에 항상 false) 
 
*/


--예제 12

DECLARE
    v_sno number(3) := 20;
    v_shop angel.shop%rowtype;
    
BEGIN
    select * into v_shop
    from shop where sang_no=v_sno;

 
    dbms_output.put_line('이름: ' || v_shop.sang_name);
    dbms_output.put_line('조회된 실행갯수: ' || sql%rowcount); --1 
    
    --student 의 java 점수 변경하기
    update student set java=99;
    dbms_output.put_line('수정된 실행갯수: ' || sql%rowcount); -- 방금 수정된 실행개수 5
end; 
/



--예제 13
-- 여러 레코드 조회 - 커서이용
DECLARE
    Cursor s1
    is
    select * from shop;
    
   
BEGIN

    dbms_output.put_line('상품번호  상품명 색상  가격');
    dbms_output.put_line('-------------------------');
    for s in s1 loop
        exit when s1%notfound;-- 더이상 데이터가 없으면 빠져나간다.
        dbms_output.put_line(s.sang_no||'  ' ||s.sang_name||'   '|| s.sang_color||'    '||s.sang_price);
    end loop;
end; 
/

-- 예제 14
-- 상품명, 색상, 가격을 입력하면 shop db에 추가하기

accept isang prompt 'sangpum?';
accept icolor prompt 'color?';
accept iprice prompt 'price?';

DECLARE
    v_sang shop.sang_name%TYPE:='&isang';
    v_color shop.sang_color%TYPE:='&icolor';
    v_price shop.sang_price%TYPE:='&iprice';
    
BEGIN
    insert into shop values (seq_shop.nextval,v_sang,v_price,v_color);
    commit;

    dbms_output.put_line('상품 정보를 추가했습니다.');
end; 
/


-- 예제 14
-- 문제 : food 테이블

/*
    fname, fprice, no 입력을 받아서
    no 가 1 이면 fname, fprice 로 데이타 추가를 하고
    no 가 2면 food 전체 데이터 출력
*/


/

/* 
if 조건식 then
    문장 1;

else 
    문장 2;
end if;

다중 if 문
if 조건식 1 then
    문장1;
elsif 조건 2 then
    문장2;
    ...
end if;

*/
-- food 전체 데이터를 출력한다.
accept ifood prompt 'food?';
accept ifprice prompt 'price?';
accept inumber prompt 'number?';

DECLARE
     v_food food.fname%TYPE:='&ifood';
    v_fprice food.fprice%TYPE:='&ifprice';
    v_no number(1) :='&inumber';
    
    Cursor s1
    is
    select * from food;
    
BEGIN   
        
        
        if v_no = 1 then
        
            insert into food values (seq_food.nextval,v_food,v_fprice);
            commit;
    
            dbms_output.put_line('상품 정보를 추가했습니다.');
            
        elsif v_no = 2 then 
            dbms_output.put_line('상품번호      상품이름    가격');
            dbms_output.put_line('------------------------------');
            for s in s1 loop
                exit when s1%notfound;-- 더이상 데이터가 없으면 빠져나간다.
                dbms_output.put_line(s.food_num||'  ' ||s.fname||'   '|| s.fprice||'    ');
            end loop;   
--            
            end if;

    
end; 
/



